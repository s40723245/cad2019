<h1>Week</h1>
<p><a href="https://s40723245.github.io/cad2019/content/Week2-5.html">week2-5</a></p>
<p><a href="https://s40723245.github.io/cad2019/content/week6-9.html">week6-9</a></p>
<p><a href="https://s40723245.github.io/cad2019/content/week10-14.html">week10-14</a></p>
<p><a href="https://s40723245.github.io/cad2019/content/week15-18.html">week15-18</a></p><h2>Week2-5</h2>
<p>week1</p>
<p>中秋烤肉連假</p>
<p>Week2</p>
<p>1.建立一個新的倉儲命名為cad2019</p>
<p>2.下載2b</p>
<p>3.更改start裡編譯器的路徑到隨身碟的201906fall的data</p>
<p>4.把倉儲從遠端拉到近端進行更新</p>
<p>5.git clone 個人倉儲網址.git</p>
<p>6.輸入git submodule add https://github.com/mdecourse/cmsimde.git cmsimde，載入cmsimde</p>
<p>7.進入cmsimde開啟倉儲 輸入python wsgi.py</p>
<p>8.如果flask沒更新，需輸入python -m pip install flask_cors，更新下載flask_cors</p>
<p>9.到up_dir複製檔案到cad2019目錄下</p>
<p>10.改完名字上傳即可</p>
<p>week3</p>
<h4>編譯步驟:</h4>
<p>先將 Y:\portablegit\bin\sh.exe 改名為 sh_rename_for_solvespace.exe (透過 MSYS2 執行 shell 指令, 而非 portablegit 中的 sh.exe)</p>
<p>git version 查驗 git 版本</p>
<p>git 2.13 版本以上, 可以使用下列 git clone<span> </span><span>--recurse-submodules 取得所有子模組資料</span></p>
<p>git clone --recurse-submodules https://github.com/solvespace/solvespace.git solvespace</p>
<p>上述指令同:</p>
<p>git clone <span><a href="https://github.com/solvespace/solvespace.git">https://github.com/solvespace/solvespace.git</a> </span></p>
<p><span>cd solvespace</span></p>
<p><span>git submodule init</span></p>
<p><span>git submodule update</span></p>
<p>edit Y:\tmp\solvespace\extlib\angle\CMakeLists.txt comment out line 713 and 714</p>
<p>#list(APPEND ANGLE_DEFINITIONS<br/>#"-DANGLE_PRELOADED_D3DCOMPILER_MODULE_NAMES={ \"d3dcompiler_47.dll\", \"d3dcompiler_46.dll\", \"d3dcompiler_43.dll\" }")<br/>endif()</p>
<p>接著需要手動進行 libpng.dll.a 的編譯, 並改名為 libpng_static.a, 並放到編譯系統的 lib 目錄中 (即隨身系統的 msys64\mingw64\lib 目錄):</p>
<p>cd solvespace</p>
<p>cd extlib</p>
<p>cd libpng</p>
<p>mkdir build</p>
<p>cd build</p>
<p>cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release<br/>mingw32-make</p>
<p>(mingw32-make -Wl,-static)</p>
<p>rename libpng.dll.a to libpng_static.a and copy to Y:\msys64\mingw64\lib</p>
<p>接著回到 solvespace 原始碼目錄, 建立 build 目錄後進入 build 目錄, 執行:</p>
<p><span>cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release</span><br/><span>mingw32-make</span></p>
<p><span>編譯完成後, 可以在 build\bin 目錄中建立 solvespace.exe, 配合相關 dll 檔案後, 即可執行.</span></p>
<p>week4</p>
<p>自主練習</p>
<p>week5</p>
<p>solvespace操作</p>
<p>1.打開solvespace</p>
<p>2.畫出一個正方體</p>
<p>3.改顏色和透明度</p>
<p>4.儲存成html檔</p>
<p>5.把編譯過的text.html檔打開編譯</p>
<p>6.打指令</p>
<p>7.完成</p>
<p>以下是我的操作影片</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" height="314" src="//www.youtube.com/embed/6nf7AtP1cXo" width="560"></iframe></p>
<h2>week6-9</h2>
<p>week6</p>
<p>V-rep 網際 Python remote API ython remote API 雙輪車控制模擬</p>
<p><img caption="false" height="314" src="/images/1_Kr-r8E0ExCQeu4AyPNq1eg.gif" width="560"/></p>
<h2>week10-14</h2>
<h2>week15-18</h2>
<h1>Note</h1>
<p><span style="color: #ff0000;">git submodule add</span> https://github.com/mdecourse/cmsimde.git cmsimde 第一次把cmsimde載入倉儲使用<br/><span style="color: #ff0000;">python -m pip install flask_cors</span> 要更新下載flask_cors<br/><span style="color: #ff0000;">git clone --recurse-submodules</span> <span style="color: #00ff00;">https://github.com/solvespace/solvespace.git solvespace</span><br/>從遠端copy cmsimde必須，綠字部分改cmsimde的網址</p><h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>